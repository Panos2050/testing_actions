name: Build WF
on:
  push:
    branches:
    - main

  pull_request:
    branches: 
    - main

  workflow_dispatch:
  
  schedule:
    - cron: '10 14 * * 1-5'

env:
  ECR_REPOSITORY: vprofile-app
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: code checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Maven Build
      run: mvn install
    
    - name: upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: target/*.war
    
    - name: notify if build fails
      if: failure()
      run: echo "Build failed! Please check the logs."

    - name: notify if build succeeds
      if: success()
      run: echo "Build succeeded! Artifact uploaded."
      
  
  testing:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: run test on maven branch
        if: github.ref == 'refs/heads/main'
        run: mvn test
      
      - name: checkstyle
        if: github.ref == 'refs/heads/main'
        run: mvn checkstyle:checkstyle

      - name: run tests on other branches
        if: github.ref != 'refs/heads/main'
        run: echo "Tests are skipped on non-main branches."
  security_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: run trivy filesystem security_scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: json
          exit-code: 0
          vuln-type: os,library
          output: trivy-report.json

      - name: upload trivy scan report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-result
          path: trivy-report.json
  
  BUILD_AND_PUBLISH:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    environment: production
    needs:
      - build
      - testing
      - security_scan
    if: github.ref == 'refs/heads/main'
    steps:
      - name: code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Docker-files/app/multistage/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

